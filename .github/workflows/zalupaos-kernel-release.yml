# .github/workflows/zalupaos-tux-kernel.yml
name: Build ZalupaOS Kernel with Tux Logo

on:
  push:
    tags: ['v*', 'zalupaos-*']
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-tux-kernel:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses-dev \
          flex \
          bison \
          libssl-dev \
          libelf-dev \
          bc \
          wget \
          cpio \
          netpbm
          
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        else
          COMMIT_SHORT="${GITHUB_SHA:0:8}"
          VERSION="zalupaos-$(date +%Y.%m.%d)-tux+${COMMIT_SHORT}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "KERNEL_VERSION=6.1.58" >> $GITHUB_ENV
        
    - name: Download Linux kernel
      run: |
        wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${{ env.KERNEL_VERSION }}.tar.xz
        tar -xf linux-${{ env.KERNEL_VERSION }}.tar.xz
        echo "KERNEL_DIR=linux-${{ env.KERNEL_VERSION }}" >> $GITHUB_ENV
        
    - name: Configure kernel with Tux logo
      run: |
        cd $KERNEL_DIR
        make defconfig
        
        # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–≥–æ—Ç–∏–ø Tux
        ./scripts/config --enable CONFIG_LOGO
        ./scripts/config --enable CONFIG_LOGO_LINUX_MONO
        ./scripts/config --enable CONFIG_LOGO_LINUX_VGA16
        ./scripts/config --enable CONFIG_LOGO_LINUX_CLUT224
        
        # –§—Ä–µ–π–º–±—É—Ñ–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É
        ./scripts/config --enable CONFIG_FB
        ./scripts/config --enable CONFIG_FIRMWARE_EDID
        ./scripts/config --enable CONFIG_FB_SIMPLE
        
        # –ë–∞–∑–æ–≤—ñ –æ–ø—Ü—ñ—ó
        ./scripts/config --enable CONFIG_SERIAL_8250
        ./scripts/config --enable CONFIG_SERIAL_8250_CONSOLE
        ./scripts/config --enable CONFIG_PRINTK
        ./scripts/config --enable CONFIG_TTY
        ./scripts/config --enable CONFIG_64BIT
        
        # Initramfs
        ./scripts/config --enable CONFIG_BLK_DEV_INITRD
        ./scripts/config --enable CONFIG_BLK_DEV_RAM
        
        # –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞–π–≤–µ
        ./scripts/config --disable CONFIG_MODULES
        
    - name: Build kernel with Tux
      run: |
        cd $KERNEL_DIR
        make -j$(nproc) bzImage
        
    - name: Create initramfs with boot message
      run: |
        mkdir -p initramfs
        cat > initramfs/init.c << 'EOF'
#include <stdio.h>
#include <unistd.h>

int main() {
    printf("\n\n");
    printf("    üêß ZalupaOS with Tux Logo üêß\n");
    printf("    ============================\n");
    printf("    Kernel Version: ${{ env.VERSION }}\n");
    printf("    Tux logo enabled in kernel!\n");
    printf("    Use: qemu-system-x86_64 -kernel bzImage -append \"console=tty0\"\n");
    printf("\n");
    
    while(1) {
        sleep(10);
        printf("üêß Tux is watching...\n");
    }
    return 0;
}
EOF
        gcc -static -Os -o initramfs/init initramfs/init.c
        cd initramfs && find . | cpio -o -H newc | gzip > ../initramfs.cpio.gz
        
    - name: Test kernel in QEMU (text mode)
      run: |
        timeout 15s qemu-system-x86_64 \
          -kernel $KERNEL_DIR/arch/x86/boot/bzImage \
          -initrd initramfs.cpio.gz \
          -append "console=ttyS0 rdinit=/init" \
          -nographic \
          -m 256M || echo "Test completed"
          
    - name: Create release with Tux kernel
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: "ZalupaOS Tux Kernel ${{ env.VERSION }}"
        body: |
          # üêß ZalupaOS Kernel with Tux Logo
          
          **–í–µ—Ä—Å—ñ—è:** ${{ env.VERSION }}  
          **–û—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å:** –í–±—É–¥–æ–≤–∞–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø Tux  
          
          ## –Ø–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø—ñ–Ω–≥–≤—ñ–Ω–æ–º:
          ```bash
          # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è Tux –ª–æ–≥–æ—Ç–∏–ø—É:
          qemu-system-x86_64 -kernel bzImage -append "console=tty0" -m 512M
          
          # –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º:
          qemu-system-x86_64 -kernel bzImage -initrd initramfs.cpio.gz -append "console=ttyS0 rdinit=/init" -nographic
          ```
          
          ## –©–æ –≤–∫–ª—é—á–µ–Ω–æ:
          - –õ–æ–≥–æ—Ç–∏–ø Tux —É —è–¥—Ä—ñ
          - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ—Ä–µ–π–º–±—É—Ñ–µ—Ä–∞
          - Initramfs –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        prerelease: true
        files: |
          ${{ env.KERNEL_DIR }}/arch/x86/boot/bzImage
          initramfs.cpio.gz
          ${{ env.KERNEL_DIR }}/.config